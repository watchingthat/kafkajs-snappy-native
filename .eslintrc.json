{
  "settings": {
    "import/resolver": {
      "node": {
        "moduleDirectory": ["node_modules", "./"]
      }
    }
  },
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "env": {
    "jest": true,
    "node": true,
    "es6": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:prettier/recommended",
    "plugin:import/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:import/typescript"
  ],
  "plugins": ["prettier", "@typescript-eslint"],
  "reportUnusedDisableDirectives": true,
  "rules": {
    // Note: the base 'no-redeclare' rule must be disabled if we enable the typescript one
//    "no-redeclare": "off",
    "@typescript-eslint/no-redeclare": "off",
    "@typescript-eslint/no-var-requires": "off",
    "no-restricted-syntax": [
      "error",
      {
        "selector": "CallExpression[arguments.length=1] > MemberExpression.callee > Identifier.property[name='reduce']",
        "message": "Provide initialValue to .reduce()."
      },
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ],
    "padding-line-between-statements": [
      "error",
      { "blankLine": "always", "prev": ["const", "let", "var"], "next": "*" },
      { "blankLine": "any", "prev": ["const", "let", "var"], "next": ["const", "let", "var"] }
    ],
    "no-underscore-dangle": ["error", { "allow": ["_id"] }],
    "arrow-parens": ["error", "always"],
    "comma-dangle": [
      "error",
      {
        "arrays": "always-multiline",
        "objects": "always-multiline",
        "imports": "always-multiline",
        "exports": "never",
        "functions": "never"
      }
    ],
    "object-shorthand": "error",
    "import/extensions": 0,
    "import/newline-after-import": ["error", { "count": 1 }],
    "import/order": [
      "error",
      {
        "groups": ["builtin", "external", "internal", "parent", "sibling", "index", "object", "type"]
      }
    ],
    "object-curly-newline": ["error", { "consistent": true }],
    "spaced-comment": 0,
    "id-length": 0,
    "no-use-before-define": 0,
    "space-before-function-paren": 0,
    "consistent-return": 0,
    "no-plusplus": 0,
    "global-require": "error",
    "no-param-reassign": ["error", { "props": true, "ignorePropertyModificationsFor": ["acc"] }],
    "no-console": ["error", { "allow": ["warn", "error"] }],
    "no-await-in-loop": "error",
    "curly": "error"
  }
}
